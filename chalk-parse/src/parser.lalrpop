use ast::*;
use lalrpop_intern::intern;

grammar;

pub Program: Program = {
    Items => Program { items: <> }
};

Items: Vec<Item> = {
    Item* => <>.into_iter().filter_map(|v| v).collect()
};

Item: Option<Item> = {
    Comment => None,
    StructDefn => Some(Item::StructDefn(<>)),
    TraitDefn => Some(Item::TraitDefn(<>)),
    Impl => Some(Item::Impl(<>)),
    KrateDefn => Some(Item::KrateDefn(<>)),
};

Comment: () = r"//.*";

KrateDefn: KrateDefn = {
    <name:KrateId> "{" <items:Items> "}" => KrateDefn {
        name: name,
        items: items,
    },
};

pub Goal: Box<Goal> = {
    Goal1,
    <g1:Goal1> "," <g2:Goal> => Box::new(Goal::And(g1, g2)),
};

Goal1: Box<Goal> = {
    "forall" "<" <p:Comma<ParameterKind>> ">" "{" <g:Goal> "}" => Box::new(Goal::ForAll(p, g)),
    "exists" "<" <p:Comma<ParameterKind>> ">" "{" <g:Goal> "}" => Box::new(Goal::Exists(p, g)),
    "if" "(" <w:Comma<WhereClause>> ")" "{" <g:Goal> "}" => Box::new(Goal::Implies(w, g)),
    "crate" <name:Krate> "{" <g:Goal> "}" => Box::new(Goal::Krate(name, g)),
    <w:WhereClause> => Box::new(Goal::Leaf(w)),
};

StructDefn: StructDefn = {
    "struct" <n:Id><p:Angle<ParameterKind>> <w:WhereClauses> "{" <f:Fields> "}" => StructDefn {
        name: n,
        parameter_kinds: p,
        where_clauses: w,
        fields: f,
    }
};

TraitDefn: TraitDefn = {
    "trait" <n:Id><p:Angle<ParameterKind>> <w:WhereClauses> "{" <a:AssocTyDefn*> "}" => TraitDefn {
        name: n,
        parameter_kinds: p,
        where_clauses: w,
        assoc_ty_defns: a,
    }
};

AssocTyDefn: AssocTyDefn = {
    "type" <name:Id> <p:Angle<ParameterKind>> ";" => AssocTyDefn {
        name: name,
        parameter_kinds: p
    }
};

Impl: Impl = {
    "impl" <p:Angle<ParameterKind>> <t:Id> <a:Angle<Parameter>> "for" <s:Ty> <w:WhereClauses> "{"
        <assoc:AssocTyValue*>"}" =>
    {
        let mut args = vec![Parameter::Ty(s)];
        args.extend(a);
        Impl {
            parameter_kinds: p,
            trait_ref: TraitRef { trait_name: t, args: args },
            where_clauses: w,
            assoc_ty_values: assoc,
        }
    },
};

ParameterKind: ParameterKind = {
    Id => ParameterKind::Ty(<>),
    LifetimeId => ParameterKind::Lifetime(<>),
    KrateId => ParameterKind::Krate(<>),
};

AssocTyValue: AssocTyValue = {
    "type" <n:Id> <a:Angle<ParameterKind>> <wc:WhereClauses> "=" <v:Ty> ";" => AssocTyValue {
        name: n,
        parameter_kinds: a,
        value: v,
        where_clauses: wc,
    },
};

pub Ty: Ty = {
    <n:Id> => Ty::Id { name: n},
    <n:Id> "<" <a:Comma<Parameter>> ">" => Ty::Apply { name: n, args: a },
    <p:ProjectionTy> => Ty::Projection { proj: p },
    "for" "<" <l:Comma<LifetimeId>> ">" <t:Ty> => Ty::ForAll {
        lifetime_names: l,
        ty: Box::new(t)
    },
};

Lifetime: Lifetime = {
    <n:LifetimeId> => Lifetime::Id { name: n },
};

Krate: Krate = {
    <n:KrateId> => Krate::Id { name: n },
};

Parameter: Parameter = {
    Ty => Parameter::Ty(<>),
    Lifetime => Parameter::Lifetime(<>),
    Krate => Parameter::Krate(<>),
};

ProjectionTy: ProjectionTy = {
    "<" <t:TraitRef<"as">> ">" "::" <n:Id> <a:Angle<Parameter>> => ProjectionTy {
        trait_ref: t, name: n, args: a
    },
};

Fields: Vec<Field> = {
    <Comma<Field>>,
};

Field: Field = {
    <n:Id> ":" <t: Ty> => Field {
        name: n,
        ty: t,
    }
};

WhereClauses: Vec<WhereClause> = {
    "where" <Comma<WhereClause>>,
    () => vec![],
};

WhereClause: WhereClause = {
    <t:TraitRef<":">> => WhereClause::Implemented { trait_ref: t },

    <t:TraitRef<(":" "!")>> => WhereClause::NotImplemented { trait_ref: t },

    "WellFormed" "(" <t:Ty> ")" => WhereClause::TyWellFormed { ty: t },

    "WellFormed" "(" <t:TraitRef<":">> ")" => WhereClause::TraitRefWellFormed {
             trait_ref: t
    },

    "LocalTo" "(" <t:Ty> "," <c:Krate> ")" => WhereClause::LocalTo { ty: t, krate: c },

    <a:Ty> <e:Equal> <b:Ty> => WhereClause::UnifyTys { a, b, eq: e },

    <a:Krate> "=" <b:Krate> => WhereClause::UnifyKrates { a, b },

    <a:Lifetime> "=" <b:Lifetime> => WhereClause::UnifyLifetimes { a, b },

    // `T: Foo<U = Bar>` -- a normalization
    <s:Ty> ":" <t:Id> "<" <a:(<Comma<Parameter>> ",")?> <name:Id> <a2:Angle<Parameter>>
        <e:Equal> <ty:Ty> ">" =>
    {
        let mut args = vec![Parameter::Ty(s)];
        if let Some(a) = a { args.extend(a); }
        let trait_ref = TraitRef { trait_name: t, args: args };
        let projection = ProjectionTy { trait_ref, name, args: a2 };
        WhereClause::ProjectionEq { projection, ty, eq: e }
    }
};

Equal: bool = {
    "=" => true,
    "!=" => false,
};

TraitRef<S>: TraitRef = {
    <s:Ty> S <t:Id> <a:Angle<Parameter>> => {
        let mut args = vec![Parameter::Ty(s)];
        args.extend(a);
        TraitRef {
            trait_name: t,
            args: args,
        }
    },
};

Comma<T>: Vec<T> = {
    Comma1<T>? => <>.unwrap_or(vec![])
};

Comma1<T>: Vec<T> = {
    <t:T> => vec![t],
    <v:Comma<T>> "," <t:T> => {
        let mut v = v;
        v.push(t);
        v
    }
};

Angle<T>: Vec<T> = {
    "<" <Comma<T>> ">",
    () => vec![],
};

Id: Identifier = {
    <l:@L> <s:r"([:alpha:]|_)([:alnum:]|_)*"> <r:@R> => Identifier {
        str: intern(s),
        span: Span::new(l, r),
    }
};

LifetimeId: Identifier = {
    <l:@L> <s:r"'([:alpha:]|_)([:alnum:]|_)*"> <r:@R> => Identifier {
        str: intern(s),
        span: Span::new(l, r),
    }
};

KrateId: Identifier = {
    <l:@L> "crate" <s:r"([:alpha:]|_)([:alnum:]|_)*"> <r:@R> => Identifier {
        str: intern(s),
        span: Span::new(l, r),
    }
};
